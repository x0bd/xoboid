const id = "fe-magic/index.md";
						const collection = "blog";
						const slug = "fe-magic";
						const body = "\r\n\"Ever heard someone say 'Frontend Frameworks Are Magic!' hanging out on Discord or reading threads on X? Well, I used to think so too!\"\r\n\r\nWhen I first started building user interfaces (UIs), mostly in game engines like Unity and Godot, it was a fairly straightforward process. It involved dragging and dropping components within the engine and writing code specific to those elements.\r\n\r\nHowever, when I transitioned to web development using frameworks like React, the declarative approach and the somewhat mysterious inner workings piqued my curiosity.\r\n\r\nFast forward to enrolling in Jonas Schmedtmann's [Ultimate React Course](https://www.udemy.com/course/the-ultimate-react-course/). He had a whole section explaining the magic behind the scenes, but let's be honest, 10+ hours of deep engineering theory can be overwhelming.\r\n\r\nBut the urge to understand this \"magic\" lingered. So, here I am, building my own framework to unveil the secrets!\r\n\r\nThis post will cover the tech stack I'll be using, the planned features, and the knowledge I hope to gain along the way.\r\n\r\n### The Tech Stack\r\n\r\nThe JavaScript ecosystem thrives on passionate debates about tools. This project will avoid those distractions and focus on core functionalities. Here's the chosen tech stack:\r\n\r\n-   **Build Tool:** npm - While pnpm offers workspace functionality, I'm still getting comfortable with it. For this project, I'll stick with the familiar npm.\r\n-   **Bundler:** Rollup - My daily driver is Vite, but this project provides the perfect opportunity to explore Rollup and its benefits based on recommendations.\r\n-   **Linting and Formatting:** ESLint and Prettier - This well-established combination ensures clean and consistent code.\r\n-   **Testing:** Vitest - This is my current favorite testing framework.\r\n-   **Language:** JavaScript - Since this is a learning project, I want to prioritize the core concepts without getting bogged down in type systems. However, JavaScript allows for exploring JSDoc for code documentation.\r\n\r\n## Roadmap\r\n\r\nThis framework will explore various functionalities that make frontend frameworks powerful. Here's what I plan to build:\r\n\r\n**Implemented Features:**\r\n\r\n-   Virtual DOM, Mounting, and Destroying\r\n-   State Management\r\n\r\n**Future Features:**\r\n\r\n-   Advanced Components\r\n    -   Stateful Components\r\n    -   Component Methods\r\n    -   Sub-components\r\n-   Keyed Lists\r\n-   Hooks\r\n-   Asynchronous Components\r\n-   TypeScript Support\r\n-   Server-Side Rendering\r\n-   Slots\r\n-   Browser extension for component inspection\r\n\r\n<!-- Implement Here -->\r\n\r\nNow that we have the virtual DOM, mounting, and state management working together, Glyph is a functional bare-bones framework! This allows us to build basic web applications. As a demonstration, check out the classic todo app built with Glyph in the video,\r\n\r\n![todo app](./todo.gif)\r\n\r\nHere's the [source code](https://github.com/x0bd/glyph-ui).\r\n\r\nThanks for reading and happy coding!\r\n";
						const data = {title:"Introducing Glyph",description:"Demystifying Frontend Frameworks by Building My Own",date:new Date(1716760800000)};
						const _internal = {
							type: 'content',
							filePath: "C:/Users/synth/Dojo/oss/xoboid/src/content/blog/fe-magic/index.md",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
